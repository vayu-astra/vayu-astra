// DHT11_PIN => D5

#include <WiFi.h>
#include <WiFiClient.h>
#include <PubSubClient.h>
#include <DHT.h>
#include <Wire.h>
#include "MQ135.h"
#include <Adafruit_BMP085.h>
#include <LiquidCrystal_I2C.h>

// MQ135 is connected to GPIO 15 (Analog ADC2_CH3)
const int mq135_sensor_pin = 15;
#define RLOAD 22
MQ135 gasSensor = MQ135(mq135_sensor_pin);
int sensorPin = mq135_sensor_pin;

// DHT11
#define DHT11_PIN 5
#define DHTTYPE DHT11

// BMP180
Adafruit_BMP085 bmp;

// set the LCD number of columns and rows
int lcdColumns = 16;
int lcdRows = 2;
float h_data = 0.0;
float t_data = 0.0;
float hic = 0.0;
float pressure_data = 0.0;
float Altitude_data = 0.0;
float cO2_ppm = 0.0;

long lastMsg = 0;

unsigned int init_error_code = 0;

DHT dht(DHT11_PIN, DHTTYPE);
LiquidCrystal_I2C lcd(0x3F, lcdColumns, lcdRows);

const char *ssid = "xxxxxxxxxxxx";
const char *password = "xxxxxxxxxxx";
#define ORG "d71au2"
#define DEVICE_TYPE "xxxxxxxxx"
#define DEVICE_ID "0xxxxxxxxxx"
#define TOKEN "xxxxxxxxxxxxxxxxxx"

char server[] = ORG ".messaging.internetofthings.ibmcloud.com";

char pubTopic1[] = "iot-2/evt/status1/fmt/json";
char pubTopic2[] = "iot-2/evt/status2/fmt/json";
char pubTopic3[] = "iot-2/evt/status3/fmt/json";
char pubTopic4[] = "iot-2/evt/status4/fmt/json";
char pubTopic5[] = "iot-2/evt/status5/fmt/json";

char authMethod[] = "use-token-auth";
char token[] = TOKEN;
char clientId[] = "d:" ORG ":" DEVICE_TYPE ":" DEVICE_ID;

WiFiClient wifiClient;
PubSubClient client(server, 1883, NULL, wifiClient);

void setup()
{
  Serial.begin(115200);

  pinMode(sensorPin, INPUT);

  lcd.init();      // initialize LCD
  lcd.backlight(); // turn on LCD backlight
  lcd.clear();

  dht.begin();

  if (!bmp.begin())
  {
    Serial.println("Could not find a valid BMP085/BMP180 sensor, check wiring!");
    lcd.setCursor(0, 1); // col , row
    lcd.print("BMP180 not found");
    while (1)
    {
    }
  }

  Serial.println();
  Serial.print("Connecting to ");
  Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");

  Serial.print("WiFi connected, IP address: ");
  Serial.println(WiFi.localIP());

  if (!client.connected())
  {
    Serial.print("Reconnecting client to ");
    Serial.println(server);
    while (!client.connect(clientId, authMethod, token))
    {
      Serial.print(".");
      delay(500);
    }
    Serial.println("Bluemix connected");
  }
}

void loop()
{
  collect_sensor_data();
  display_data();
  client.loop();
  long now = millis();
  if (now - lastMsg > 3000)
  {
    lastMsg = now;
    snd_data_to_cloud();
  }
  delay(100);
}

void collect_sensor_data()
{
  /*==================================================================*/
  //==>> Get input data from MQ135
  cO2_ppm = 300 + gasSensor.getPPM();
  //cO2_ppm = analogRead(sensorPin);
  /*==================================================================*/
  /*==================================================================*/
  //==>> Get input data from DHT11
  h_data = dht.readHumidity();
  // Read temperature as Celsius (the default)
  t_data = dht.readTemperature();
  // Check if any reads failed and exit early (to try again).
  if (isnan(h_data) || isnan(t_data))
  {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  // Compute heat index in Celsius (isFahreheit = false)
  hic = dht.computeHeatIndex(t_data, h_data, false);
  /*==================================================================*/
  /*==================================================================*/
  //==>> Get input data from BMP180
  // Read pressure as passcal
  pressure_data = bmp.readPressure();
  // Calculate altitude assuming 'standard' barometric
  Altitude_data = bmp.readAltitude(102000);
  /*==================================================================*/
}

void display_data()
{
  /*==================================================================*/
  //==>> Diaplay DHT11
  // Diaplay Humidity
  lcd.setCursor(0, 0); // col , row
  lcd.print("Humidity:");
  lcd.setCursor(10, 0); // col , row
  lcd.print(h_data);
  lcd.setCursor(15, 0); // col , row
  lcd.print("%");

  // Diaplay Temperature
  lcd.setCursor(0, 1); // col , row
  lcd.print("Temp:");
  lcd.setCursor(9, 1); // col , row
  lcd.print(t_data);
  lcd.setCursor(14, 1); // col , row
  lcd.print("'C");
  delay(3000);
  lcd.clear();
  /*==================================================================*/
  /*==================================================================*/
  //==>> Diaplay BMP11
  // Diaplay Pressure
  lcd.setCursor(0, 0); // col , row
  lcd.print("Pressure:");
  lcd.setCursor(10, 0); // col , row
  lcd.print(pressure_data);
  lcd.setCursor(15, 0); // col , row
  lcd.print("Pa");

  // Diaplay Altitude
  lcd.setCursor(0, 1); // col , row
  lcd.print("Altitude:");
  lcd.setCursor(10, 1); // col , row
  lcd.print(Altitude_data);
  lcd.setCursor(15, 1); // col , row
  lcd.print("m");
  delay(3000);
  lcd.clear();
  /*==================================================================*/
  /*==================================================================*/
  //==>> Diaplay MQ135
  // Diaplay Pressure
  lcd.setCursor(0, 0); // col , row
  lcd.print("CO2:");
  lcd.setCursor(7, 0); // col , row
  lcd.print(cO2_ppm);
  lcd.setCursor(13, 0); // col , row
  lcd.print("ppm");
  delay(3000);
  lcd.clear();
  /*==================================================================*/
}

void send_data_to_cloud()
{
  /*====================== MQTT ============================*/
  /*====================== pubTopic1 =======================*/
  String payload = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
  payload += ",\"Humidity\":";
  payload += h_data;
  payload += "}}";

  Serial.print("Sending payload: ");
  Serial.println(payload);

  if (client.publish(pubTopic1, (char *)payload.c_str()))
  {
    Serial.println("Publish ok");
  }
  else
  {
    Serial.println("Publish failed");
  }
  /*=========================================================*/
  /*====================== pubTopic2 =======================*/
  String payload1 = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
  payload1 += ",\"Temperature\":";
  payload1 += t_data;
  payload1 += "}}";

  Serial.print("Sending payload1: ");
  Serial.println(payload1);

  if (client.publish(pubTopic2, (char *)payload1.c_str()))
  {
    Serial.println("Publish ok");
  }
  else
  {
    Serial.println("Publish failed");
  }
  /*=========================================================*/
  /*====================== pubTopic3 =======================*/
  String payload2 = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
  payload2 += ",\"Pressure\":";
  payload2 += pressure_data;
  payload2 += "}}";

  Serial.print("Sending payload2: ");
  Serial.println(payload2);

  if (client.publish(pubTopic3, (char *)payload2.c_str()))
  {
    Serial.println("Publish ok");
  }
  else
  {
    Serial.println("Publish failed");
  }
  /*=========================================================*/
  /*====================== pubTopic4 =======================*/
  String payload3 = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
  payload3 += ",\"Altitude\":";
  payload3 += Altitude_data;
  payload3 += "}}";

  Serial.print("Sending payload3: ");
  Serial.println(payload3);

  if (client.publish(pubTopic4, (char *)payload3.c_str()))
  {
    Serial.println("Publish ok");
  }
  else
  {
    Serial.println("Publish failed");
  }
  /*=========================================================*/
  /*====================== pubTopic5 =======================*/
  String payload4 = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
  payload4 += ",\"Co2\":";
  payload4 += cO2_ppm;
  payload4 += "}}";

  Serial.print("Sending payload4: ");
  Serial.println(payload4);

  if (client.publish(pubTopic5, (char *)payload4.c_str()))
  {
    Serial.println("Publish ok");
  }
  else
  {
    Serial.println("Publish failed");
  }
  /*=========================================================*/
}